{
    "docs": [
        {
            "location": "/",
            "text": "LFMC v1.0\n\n\nPLEASE NOTE: DOCUMENTATION IS UNDER DEVELOPMENT\n\n\nLast updated: Monday, 08. January 2018 10:34AM \n\n\nAudience\n\n\nDELWP\n\n\nRequirements\n\n\nThe complete system requires 5 seperate subsystems. Each subsystem is deployed slightly differently.\n\n\nThe basic requirements are:\n\n\n\n\nDocker\n\n\nKubernetes\n\n\n\n\nSupport\n\n\n\n\nLead Developer: \nAnthony Rawlins\n\n\nProject Manager: \nTrent Penman\n\n\n\n\nContributions\n\n\nEach subsystem is maintained in a seperate Github project.\n\n\n\n\nLFMC Documentation\n\n\nLFMC WebServer\n\n\nLFMC GeoServer\n\n\nLFMC Database\n\n\nLFMC Logic\n\n\nLFMC API\n\n\n\n\nCommits will trigger continuous integration with the infrastructure on the \nDocker Cloud\n.\n\n\nLicensing\n\n\nCopyright 2017-2018 University of Melbourne",
            "title": "Home"
        },
        {
            "location": "/#lfmc-v10",
            "text": "PLEASE NOTE: DOCUMENTATION IS UNDER DEVELOPMENT  Last updated: Monday, 08. January 2018 10:34AM",
            "title": "LFMC v1.0"
        },
        {
            "location": "/#audience",
            "text": "DELWP",
            "title": "Audience"
        },
        {
            "location": "/#requirements",
            "text": "The complete system requires 5 seperate subsystems. Each subsystem is deployed slightly differently.  The basic requirements are:   Docker  Kubernetes",
            "title": "Requirements"
        },
        {
            "location": "/#support",
            "text": "Lead Developer:  Anthony Rawlins  Project Manager:  Trent Penman",
            "title": "Support"
        },
        {
            "location": "/#contributions",
            "text": "Each subsystem is maintained in a seperate Github project.   LFMC Documentation  LFMC WebServer  LFMC GeoServer  LFMC Database  LFMC Logic  LFMC API   Commits will trigger continuous integration with the infrastructure on the  Docker Cloud .",
            "title": "Contributions"
        },
        {
            "location": "/#licensing",
            "text": "Copyright 2017-2018 University of Melbourne",
            "title": "Licensing"
        },
        {
            "location": "/about/",
            "text": "The LFMC Project\n\n\nThe LFMC Project was developed in collaboration with the \nUniversity of Melbourne\n, \nDELWP Vic.\n, and the \nBNHCRC\n.\n\n\nSystem Overview",
            "title": "About"
        },
        {
            "location": "/about/#the-lfmc-project",
            "text": "The LFMC Project was developed in collaboration with the  University of Melbourne ,  DELWP Vic. , and the  BNHCRC .  System Overview",
            "title": "The LFMC Project"
        },
        {
            "location": "/models/",
            "text": "Models\n\n\nModel Descriptions\n and \nmetadata\n\n\nDynamic Temporal Availability is shown on the \nReference Website",
            "title": "Models"
        },
        {
            "location": "/models/#models",
            "text": "Model Descriptions  and  metadata  Dynamic Temporal Availability is shown on the  Reference Website",
            "title": "Models"
        },
        {
            "location": "/download/",
            "text": "Download\n\n\nTo get the software source download a zip, or clone the repository using:\n\n\n$ git clone https://github.com/AnthonyRawlinsUoM/LFMC.git\n\n\n\nSubmodules are available individually, but little is to be gained running them independantly.",
            "title": "Download"
        },
        {
            "location": "/download/#download",
            "text": "To get the software source download a zip, or clone the repository using:  $ git clone https://github.com/AnthonyRawlinsUoM/LFMC.git  Submodules are available individually, but little is to be gained running them independantly.",
            "title": "Download"
        },
        {
            "location": "/install/",
            "text": "Installation from Docker\n\n\nModel Server Instance\n\n\n$ docker pull anthonyrawlinsuom/lfmc-api\n\n\n\nDatabase Server Instance\n\n\n$ docker pull anthonyrawlinsuom/lfmc-mongodb\n\n\n\nWeb Server Instance\n\n\n$ docker pull anthonyrawlinsuom/lfmc-staging\n\n\n\nLogic Server\n\n\n$ docker pull anthonyrawlinsuom/lfmc-pipeline\n\n\n\nGeoServer Instance\n\n\n$ docker pull anthonyrawlinsuom/lfmc-geoserver\n\n\n\nInstallation from GitHub\n\n\nFirst \nclone the main collection repo\n.\n\n\nBuilding the containers\n\n\nTo build all the docker images from source run the following code:\n\n\n$ git clone https://github.com/AnthonyRawlinsUoM/LFMC\n$ cd LFMC\n$ make clean \n$ make && make install\n\n\n\nBuilding the component containers\n\n\nTo build a component container use any of the following commands:\n\n\n$ make db\n$ make web\n$ make docs\n$ make api\n$ make geoserver\n$ make logic\n\n\n\nOr by cd'ing into the module subfolder and running:\n\n\n$ make build\n\n\n\nCleaning the builds\n\n\n$ make clean\n\n\n\nStarting the System\n\n\n$ docker-compose up\n\n\n\nViewing the running docker processes\n\n\n$ docker ps\n\n\n\nStopping the containers\n\n\nTo stop a container use one of the following commands:\n\n\n$ docker stop lfmc_geoserver_1\n$ docker stop lfmc_api_1\n\netc..\n\n\n\nTo stop the whole system:\n\n\nCtrl-C in the active console (*Twice* to force a stop)\n\n\n\nRestarting the containers\n\n\nTo restart a container (for example after updating some code), run:\n\n\n$ docker-compose up -d <container>",
            "title": "Installation"
        },
        {
            "location": "/install/#installation-from-docker",
            "text": "Model Server Instance  $ docker pull anthonyrawlinsuom/lfmc-api  Database Server Instance  $ docker pull anthonyrawlinsuom/lfmc-mongodb  Web Server Instance  $ docker pull anthonyrawlinsuom/lfmc-staging  Logic Server  $ docker pull anthonyrawlinsuom/lfmc-pipeline  GeoServer Instance  $ docker pull anthonyrawlinsuom/lfmc-geoserver",
            "title": "Installation from Docker"
        },
        {
            "location": "/install/#installation-from-github",
            "text": "First  clone the main collection repo .",
            "title": "Installation from GitHub"
        },
        {
            "location": "/install/#building-the-containers",
            "text": "To build all the docker images from source run the following code:  $ git clone https://github.com/AnthonyRawlinsUoM/LFMC\n$ cd LFMC\n$ make clean \n$ make && make install  Building the component containers  To build a component container use any of the following commands:  $ make db\n$ make web\n$ make docs\n$ make api\n$ make geoserver\n$ make logic  Or by cd'ing into the module subfolder and running:  $ make build  Cleaning the builds  $ make clean",
            "title": "Building the containers"
        },
        {
            "location": "/install/#starting-the-system",
            "text": "$ docker-compose up",
            "title": "Starting the System"
        },
        {
            "location": "/install/#viewing-the-running-docker-processes",
            "text": "$ docker ps",
            "title": "Viewing the running docker processes"
        },
        {
            "location": "/install/#stopping-the-containers",
            "text": "To stop a container use one of the following commands:  $ docker stop lfmc_geoserver_1\n$ docker stop lfmc_api_1\n\netc..  To stop the whole system:  Ctrl-C in the active console (*Twice* to force a stop)",
            "title": "Stopping the containers"
        },
        {
            "location": "/install/#restarting-the-containers",
            "text": "To restart a container (for example after updating some code), run:  $ docker-compose up -d <container>",
            "title": "Restarting the containers"
        },
        {
            "location": "/config/",
            "text": "Configuration\n\n\nTo host the project yourself a few files will need a little configuration.\n\n\n\n\n\n\nFirstly signup to \nAuth0\n and create an API Access Token.\n\n\n\n\n\n\nCreate Enterprise links for OAuth configuration.\n\n\n\n\nConfigure database users automatic signup.\n\n\n\n\nTODO\n\n\nOther configuration steps\n\n\n\n\nDomain name registration and delegation of wildcard subdomain.\n\n\nDataset placement and PATH configuration.\n\n\nSecurity Essentials, password configuration.",
            "title": "Configuration"
        },
        {
            "location": "/config/#configuration",
            "text": "To host the project yourself a few files will need a little configuration.    Firstly signup to  Auth0  and create an API Access Token.    Create Enterprise links for OAuth configuration.   Configure database users automatic signup.   TODO  Other configuration steps   Domain name registration and delegation of wildcard subdomain.  Dataset placement and PATH configuration.  Security Essentials, password configuration.",
            "title": "Configuration"
        },
        {
            "location": "/deploy/",
            "text": "Deployment\n\n\nA single GeoServer instance should be sufficient in most circumstances. Additional WebServer instances can  be deployed via a container management tool like \nKubernetes\n as required, by modifying the docker compose yaml file with a tool such as \nKompose\n.\n\n\nServer Requirements\n\n\nAny hosting platform capable of running Docker.\nIdeally Kubernetes.\nIn a perfect world each container would run on its own VCPU(s).\n\n\nRequirements\n\n\n\n\nDocker\n\n\nDocker Compose\n\n\n\n\nA brief introduction to Docker \n\n\nTo make the project:\n\n\n$ cd <install-dir>\n$ make\n$ make install\n\n\n\nDevelopers - To make a version release:\n\n\n$ make release\n\n\n\nThis auto-increments the version numbers and initiates the build/relase cycle.\nThen enter your GitHub username and password when prompted.\n\n\nTo run the project locally\n\n\n$ docker-compose up\n\n\n\nRestarting services\n\n\nFor example to restart the API server just enter:\n\n\n$ docker-compose restart api\n\n\n\nStopping the Project\n\n\n$ docker-compose down\n\n\n\nSee: \nDocker Compose Documentation\n\n\nPorts used by the project\n\n\n\n\n3000  -> Web Server (express, for live site)\n\n\n4200  -> Web Server (ng serve, for development site)\n\n\n8000  -> Documentation\n\n\n8002  -> LFMC API (REST)\n\n\n8080  -> GeoServer\n\n\n27017 -> MongoDB",
            "title": "Deployment"
        },
        {
            "location": "/deploy/#deployment",
            "text": "A single GeoServer instance should be sufficient in most circumstances. Additional WebServer instances can  be deployed via a container management tool like  Kubernetes  as required, by modifying the docker compose yaml file with a tool such as  Kompose .  Server Requirements  Any hosting platform capable of running Docker.\nIdeally Kubernetes.\nIn a perfect world each container would run on its own VCPU(s).  Requirements   Docker  Docker Compose   A brief introduction to Docker   To make the project:  $ cd <install-dir>\n$ make\n$ make install  Developers - To make a version release:  $ make release  This auto-increments the version numbers and initiates the build/relase cycle.\nThen enter your GitHub username and password when prompted.  To run the project locally  $ docker-compose up  Restarting services  For example to restart the API server just enter:  $ docker-compose restart api  Stopping the Project  $ docker-compose down  See:  Docker Compose Documentation  Ports used by the project   3000  -> Web Server (express, for live site)  4200  -> Web Server (ng serve, for development site)  8000  -> Documentation  8002  -> LFMC API (REST)  8080  -> GeoServer  27017 -> MongoDB",
            "title": "Deployment"
        },
        {
            "location": "/examples/",
            "text": "Making a query\n\n\n\n\n\nLFMC Tutorial Sample\n from \nAnthony Rawlins\n on \nVimeo\n.\n\n\n\nModel Selection\n\n\n\n\nSee: Models\n\n\nSpatial Selections\n\n\nThere are two main methods for making spatial selections.\n   + By importing a shape from either GeoJSON or SHP\n   + By drawing a polygon by hand using the drawling tools\n\n\nWe have provided some pre-defined example selections for all users...\n\n\n\n\nPolygon Selection\n\n\nUse the Polygon Tool to draw a selection.\n\n\n\n\nPolygons are always enclosed when drawn using the polygon tool. An Error will be reported if the polygon was not fully enclosed when imported.\n\n\n\n\nTo avoid weird behaviour when drawing.\n\nTurn \nOFF\n \nSnapping to Boundary\n\n\n\n\n\n\nLoading a GeoJSON File\n\n\nGeoJSON can be copy/pasted into the SPACE window. Pasting new data will overwrite the current spatial selection but will not be saved until clicking the Orange Pencil (Save) Icon.\n\n\nImporting a SHP file\n\n\nShape files (and their auxillaries) can be imported using the provided upload/import tool. These SHP fiels are converted on the server to GeoJSON format, and will be made available for selection.\n\n\n\n\nImportant note on file storage and persistence\n\n\nData that is drawn or imported by the user is stored \nin \nyour\n browser's local storage\n. This means if you log in on another machine, or via a different browser, your selections will \nNOT\n be available unless you reload them. The selections \nwill persist\n on the \nsame machine over different sessions\n though.\n\n\n\n\nTemporal Selections\n\n\nTemporal selections can be made from a start to a finish date in the TIME Panel.\n\n\n\n\nUse the calendar chooser (by clicking the date) on both the left and right side of th TIME Panel to select the day to start and end accordingly.\nAll records available between (inclusive) these dates will be used to plot your results.\n\n\nThe temporal selection is indicated by the \nCurrent Time Window\n. This window can be advanced or regressed by a day at atime by clicking its surrounding single arrows. The double arrows indicate advancing or regressing the current time window by its full length, ie., a 7 day window will be moved by a week if the double arrows are used.\n\n\nThe start and finish dates can simarly be advanced or regressed by a day by using the single arrows.\n\n\nTemporal Results\n\n\nViewing fine-grained data by Time-brushing\n\n\n\n\n\n\nInterpretting temporal results\n\n\nValues can be inspected by hovering your mouse over a series. Refer to the Model description for specifics on what the value actually conveys. Some Models use indexes while yet others use scalar values.\n\n\n\n\nSome Important caveats\n\n\nUse caution when comparing values!\n\nModels can use varying scales and a value of 0.8 in a range(0...1) can be more significant than 2 in a range(0-100).\nSome Models use a \nmoisture level\n, while others use a \nmoisture defecit\n This means sometimes diverging series can indicate similar moisture trends. For specific model information, please refer to their respective publications.\n\n\n\n\n\n\nTODO...\nAppropriate Ranges\nTemporal Resolution\n\n\n\n\nImportant note about value interpolation\n\n\nValues tha are plotted in the TIME Panel are interpolated using a specific algorithm to provide the simplest interpretation. Lines between observed values are indicative only and should not be used as an accurate representation of fuel moisture or index levels.\n\n\n\n\nGeo-location\n\n\nUse the Map's Search field to find specific named locations.",
            "title": "Examples"
        },
        {
            "location": "/examples/#making-a-query",
            "text": "LFMC Tutorial Sample  from  Anthony Rawlins  on  Vimeo .  Model Selection   See: Models  Spatial Selections  There are two main methods for making spatial selections.\n   + By importing a shape from either GeoJSON or SHP\n   + By drawing a polygon by hand using the drawling tools  We have provided some pre-defined example selections for all users...   Polygon Selection  Use the Polygon Tool to draw a selection.   Polygons are always enclosed when drawn using the polygon tool. An Error will be reported if the polygon was not fully enclosed when imported.   To avoid weird behaviour when drawing. \nTurn  OFF   Snapping to Boundary    Loading a GeoJSON File  GeoJSON can be copy/pasted into the SPACE window. Pasting new data will overwrite the current spatial selection but will not be saved until clicking the Orange Pencil (Save) Icon.  Importing a SHP file  Shape files (and their auxillaries) can be imported using the provided upload/import tool. These SHP fiels are converted on the server to GeoJSON format, and will be made available for selection.   Important note on file storage and persistence  Data that is drawn or imported by the user is stored  in  your  browser's local storage . This means if you log in on another machine, or via a different browser, your selections will  NOT  be available unless you reload them. The selections  will persist  on the  same machine over different sessions  though.   Temporal Selections  Temporal selections can be made from a start to a finish date in the TIME Panel.   Use the calendar chooser (by clicking the date) on both the left and right side of th TIME Panel to select the day to start and end accordingly.\nAll records available between (inclusive) these dates will be used to plot your results.  The temporal selection is indicated by the  Current Time Window . This window can be advanced or regressed by a day at atime by clicking its surrounding single arrows. The double arrows indicate advancing or regressing the current time window by its full length, ie., a 7 day window will be moved by a week if the double arrows are used.  The start and finish dates can simarly be advanced or regressed by a day by using the single arrows.  Temporal Results  Viewing fine-grained data by Time-brushing    Interpretting temporal results  Values can be inspected by hovering your mouse over a series. Refer to the Model description for specifics on what the value actually conveys. Some Models use indexes while yet others use scalar values.",
            "title": "Making a query"
        },
        {
            "location": "/examples/#some-important-caveats",
            "text": "Use caution when comparing values! \nModels can use varying scales and a value of 0.8 in a range(0...1) can be more significant than 2 in a range(0-100).\nSome Models use a  moisture level , while others use a  moisture defecit  This means sometimes diverging series can indicate similar moisture trends. For specific model information, please refer to their respective publications.    TODO...\nAppropriate Ranges\nTemporal Resolution   Important note about value interpolation  Values tha are plotted in the TIME Panel are interpolated using a specific algorithm to provide the simplest interpretation. Lines between observed values are indicative only and should not be used as an accurate representation of fuel moisture or index levels.",
            "title": "Some Important caveats"
        },
        {
            "location": "/examples/#geo-location",
            "text": "Use the Map's Search field to find specific named locations.",
            "title": "Geo-location"
        },
        {
            "location": "/API/",
            "text": "API\n\n\nIntended as a component to the LFMC Server Ecosystem. This is an image that answers Temporal Queries to form Time-series data in JSON format for subsequent analysis of Landscape Fuel Moisture Condition.\n\n\nAlso collects input data from a variety of sources and starts ingestion tasking on the cluster.\nProcesses, Models and TS Data are all exposed through a \nRESTful API\n.\n\n\n\n\nBuilding the Docker Image\n\n\n$ docker build .\n\n\n\nRunning the Docker Image\n\n\n$ docker run -it -p 8002:8002 anthonyrawlinsuom/lfmc-api\n\n\n\nMonitoring the API Process Log inside the Container\n\n\n$ docker run -it -p 8002:8002 anthonyrawlinsuom/lfmc-api -exec /bin/bash /logviewer.sh\n\n\n\nThe API is intended to be self-documenting and the endpoint can be queried using curl or similar commands. Hug is used for API development and Hug also naturally exposes a WSGI-Compatible API ready for production use.\n\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1\n\n\n\n\n\nEndpoint Examples\n\n\nRequesting with a basic spatio-temporal query via POST\n\n\ncurl -H \"Content-Type: application/json\" \\\n -H \"Accept: application/json\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\",\n        \"finish\": \"YYYYmmdd\",\n        \"models\": \"<comma separated list of models>\", \\\n        \"weighted\": \"True\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.json\n\n\n\n\n\nNB in some instances area-weighted masking is inappropriate so you can pass a \nFalse\n value to the \nweighted\n field to enable binary masking only.\n\n\n\n\nRequesting NetCDF via POST\n\n\ncurl -H \"Content-Type: application/json\" \\\n     -H \"Accept: application/x-binary\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\",\n        \"finish\": \"YYYYmmdd\",\n        \"models\": \"<comma separated list of models>\", \\\n        \"weighted\": \"True\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.nc\n\n\n\n\n\nNote the suffix of the request URL \n.nc\n vs. \n.json\n.\n\n\n\n\nRequesting an MP4 via POST\n\n\ncurl -H \"Content-Type: application/json\" \\\n     -H \"Accept: video/mp4\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\",\n        \"finish\": \"YYYYmmdd\",\n        \"models\": \"<comma separated list of models>\", \\\n        \"weighted\": \"True\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.mp4\n\n\n\n\n\nNote the \n.mp4\n suffix.\n\n\n\n\nAvailable Models and their metadata via GET\n\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models",
            "title": "API"
        },
        {
            "location": "/API/#api",
            "text": "Intended as a component to the LFMC Server Ecosystem. This is an image that answers Temporal Queries to form Time-series data in JSON format for subsequent analysis of Landscape Fuel Moisture Condition.  Also collects input data from a variety of sources and starts ingestion tasking on the cluster.\nProcesses, Models and TS Data are all exposed through a  RESTful API .   Building the Docker Image  $ docker build .  Running the Docker Image  $ docker run -it -p 8002:8002 anthonyrawlinsuom/lfmc-api  Monitoring the API Process Log inside the Container  $ docker run -it -p 8002:8002 anthonyrawlinsuom/lfmc-api -exec /bin/bash /logviewer.sh  The API is intended to be self-documenting and the endpoint can be queried using curl or similar commands. Hug is used for API development and Hug also naturally exposes a WSGI-Compatible API ready for production use.  $ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1",
            "title": "API"
        },
        {
            "location": "/API/#endpoint-examples",
            "text": "Requesting with a basic spatio-temporal query via POST  curl -H \"Content-Type: application/json\" \\\n -H \"Accept: application/json\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\",\n        \"finish\": \"YYYYmmdd\",\n        \"models\": \"<comma separated list of models>\", \\\n        \"weighted\": \"True\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.json   NB in some instances area-weighted masking is inappropriate so you can pass a  False  value to the  weighted  field to enable binary masking only.   Requesting NetCDF via POST  curl -H \"Content-Type: application/json\" \\\n     -H \"Accept: application/x-binary\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\",\n        \"finish\": \"YYYYmmdd\",\n        \"models\": \"<comma separated list of models>\", \\\n        \"weighted\": \"True\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.nc   Note the suffix of the request URL  .nc  vs.  .json .   Requesting an MP4 via POST  curl -H \"Content-Type: application/json\" \\\n     -H \"Accept: video/mp4\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\",\n        \"finish\": \"YYYYmmdd\",\n        \"models\": \"<comma separated list of models>\", \\\n        \"weighted\": \"True\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.mp4   Note the  .mp4  suffix.   Available Models and their metadata via GET  $ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models",
            "title": "Endpoint Examples"
        },
        {
            "location": "/release-notes/",
            "text": "Release notes\n\n\nVersions 0.0.1 to 0.5.0 - were pre initial release.\nUsed for in-house development only.\n\n\nThis document is a \nstub\n for future version relase notes.\n\n\nCurrent version numbers are as follows:\n\n\n\n\n\n\n\n\nModule\n\n\nGithub Project\n\n\nDocker Project\n\n\nVersion\n\n\n\n\n\n\n\n\n\n\nLFMC Documentation\n\n\nlfmc-docs\n\n\nlfmc-docs\n\n\nv1.0.0\n\n\n\n\n\n\nLFMC WebServer\n\n\nlfmc-staging\n\n\nlfmc-staging\n\n\nv0.6.16\n\n\n\n\n\n\nLFMC GeoServer\n\n\nlfmc-geoserver\n\n\nlfmc-geoserver\n\n\nv1.0.0\n\n\n\n\n\n\nLFMC Database\n\n\nlfmc-mongodb\n\n\nlfmc-mongodb\n\n\nv1.0.0\n\n\n\n\n\n\nLFMC Logic\n\n\nlfmc-pipeline\n\n\nlfmc-pipeline\n\n\nv1.0.0\n\n\n\n\n\n\nLFMC API\n\n\nlfmc-pipeline\n\n\nlfmc-api\n\n\nv1.0.0",
            "title": "Release Notes"
        },
        {
            "location": "/release-notes/#release-notes",
            "text": "Versions 0.0.1 to 0.5.0 - were pre initial release.\nUsed for in-house development only.  This document is a  stub  for future version relase notes.  Current version numbers are as follows:     Module  Github Project  Docker Project  Version      LFMC Documentation  lfmc-docs  lfmc-docs  v1.0.0    LFMC WebServer  lfmc-staging  lfmc-staging  v0.6.16    LFMC GeoServer  lfmc-geoserver  lfmc-geoserver  v1.0.0    LFMC Database  lfmc-mongodb  lfmc-mongodb  v1.0.0    LFMC Logic  lfmc-pipeline  lfmc-pipeline  v1.0.0    LFMC API  lfmc-pipeline  lfmc-api  v1.0.0",
            "title": "Release notes"
        },
        {
            "location": "/errors/",
            "text": "Error Reporting\n\n\nShould you encounter a error, omission or reproducible bug please contact \nAnthony Rawlins\n at University of Melbourne.\n\n\nInline error reporting is as simple as clicking the green \nOK\n button on reported errors. Clicking \nCancel\n will not send a bug report.\n\n\nAll logged and reported errors automatically create an issue on the appropriate Github Repository, allowing for \nIssue Tracking\n. You can also use the same page to add Feature Requests.",
            "title": "Error Reporting"
        },
        {
            "location": "/errors/#error-reporting",
            "text": "Should you encounter a error, omission or reproducible bug please contact  Anthony Rawlins  at University of Melbourne.  Inline error reporting is as simple as clicking the green  OK  button on reported errors. Clicking  Cancel  will not send a bug report.  All logged and reported errors automatically create an issue on the appropriate Github Repository, allowing for  Issue Tracking . You can also use the same page to add Feature Requests.",
            "title": "Error Reporting"
        }
    ]
}