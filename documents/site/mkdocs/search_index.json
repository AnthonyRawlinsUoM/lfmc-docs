{
    "docs": [
        {
            "location": "/",
            "text": "LFMC v1.0\n\n\nPLEASE NOTE: DOCUMENTATION IS UNDER DEVELOPMENT\n\n\nLast updated: Monday, 08. January 2018 10:34AM \n\n\nAudience\n\n\nDELWP\n\n\nRequirements\n\n\nThe complete system requires 5 seperate subsystems. Each subsystem is deployed slightly differently.\n\n\nThe basic requirements are:\n\n\n\n\nDocker\n\n\nKubernetes\n\n\n\n\nSupport\n\n\n\n\nLead Developer: \nAnthony Rawlins\n\n\nProject Manager: \nTrent Penman\n\n\n\n\nContributions\n\n\nEach subsystem is maintained in a seperate Github project.\n\n\n\n\nLFMC Documentation\n\n\nLFMC WebServer\n\n\nLFMC GeoServer\n\n\nLFMC Database\n\n\nLFMC Logic\n\n\nLFMC API\n\n\n\n\nCommits will trigger continuous integration with the infrastructure on the \nDocker Cloud\n.\n\n\nLicensing\n\n\nCopyright 2017-2018 University of Melbourne",
            "title": "Home"
        },
        {
            "location": "/#lfmc-v10",
            "text": "PLEASE NOTE: DOCUMENTATION IS UNDER DEVELOPMENT  Last updated: Monday, 08. January 2018 10:34AM",
            "title": "LFMC v1.0"
        },
        {
            "location": "/#audience",
            "text": "DELWP",
            "title": "Audience"
        },
        {
            "location": "/#requirements",
            "text": "The complete system requires 5 seperate subsystems. Each subsystem is deployed slightly differently.  The basic requirements are:   Docker  Kubernetes",
            "title": "Requirements"
        },
        {
            "location": "/#support",
            "text": "Lead Developer:  Anthony Rawlins  Project Manager:  Trent Penman",
            "title": "Support"
        },
        {
            "location": "/#contributions",
            "text": "Each subsystem is maintained in a seperate Github project.   LFMC Documentation  LFMC WebServer  LFMC GeoServer  LFMC Database  LFMC Logic  LFMC API   Commits will trigger continuous integration with the infrastructure on the  Docker Cloud .",
            "title": "Contributions"
        },
        {
            "location": "/#licensing",
            "text": "Copyright 2017-2018 University of Melbourne",
            "title": "Licensing"
        },
        {
            "location": "/about/",
            "text": "The LFMC Project\n\n\nThe LFMC Project was developed in collaboration with the \nUniversity of Melbourne\n, \nDELWP Vic.\n, and the \nBNHCRC\n.\n\n\nSystem Overview\n\n\nThe LFMC system is built on a MicroService Architecture for modularity, scalability, security, and flexibility.\n\n\n\n\nThe system draws upon raw data products published by the Bureau of Meterology and the National Computing Infrastructure GeoNetwork, and dynamically generates, stores and publishes a selection of Fuel Moisture Models based on the latest Scientific Research.\n\n\nObjective\n\n\nFuel Moisture Models each utilise specific metrics, spatial and temporal scales, and as such, apply to the environment in different ways. This project attempted to bring these varying models into a single unified platform to provide a means of comparing and contrasting each product across the Victorian (and sometimes Australian) landscape.\n\n\nOutcome\n\n\nTools were created to allow the fine grained analysis of each model using spatial and temporal search parameters using common formats such as GeoJSON and ESRI Shapefiles.\n\n\nThe availability of data is determined by the release cycles of the authors including the publishing times of the upstream providers.\n\n\nThe system has been developed to be 'self-healing' and highly performant. However while it will pro-actively seek missing source datasets, communication errors, permissions, or licensing, could possibly prevent timely delivery of results.",
            "title": "About"
        },
        {
            "location": "/about/#the-lfmc-project",
            "text": "The LFMC Project was developed in collaboration with the  University of Melbourne ,  DELWP Vic. , and the  BNHCRC .  System Overview  The LFMC system is built on a MicroService Architecture for modularity, scalability, security, and flexibility.   The system draws upon raw data products published by the Bureau of Meterology and the National Computing Infrastructure GeoNetwork, and dynamically generates, stores and publishes a selection of Fuel Moisture Models based on the latest Scientific Research.  Objective  Fuel Moisture Models each utilise specific metrics, spatial and temporal scales, and as such, apply to the environment in different ways. This project attempted to bring these varying models into a single unified platform to provide a means of comparing and contrasting each product across the Victorian (and sometimes Australian) landscape.  Outcome  Tools were created to allow the fine grained analysis of each model using spatial and temporal search parameters using common formats such as GeoJSON and ESRI Shapefiles.  The availability of data is determined by the release cycles of the authors including the publishing times of the upstream providers.  The system has been developed to be 'self-healing' and highly performant. However while it will pro-actively seek missing source datasets, communication errors, permissions, or licensing, could possibly prevent timely delivery of results.",
            "title": "The LFMC Project"
        },
        {
            "location": "/models/",
            "text": "Models\n\n\nModel Descriptions\n and \nmetadata\n\n\nDynamic Temporal Availability is shown on the \nReference Website",
            "title": "Models"
        },
        {
            "location": "/models/#models",
            "text": "Model Descriptions  and  metadata  Dynamic Temporal Availability is shown on the  Reference Website",
            "title": "Models"
        },
        {
            "location": "/install/",
            "text": "Installation from Docker\n\n\nAssumes a Linux OS as the Container Host. LFMC was developed and tested on these OSes.\n\n\nUbuntu Server 16.04 LTS\nUbuntu Server 18.04 LTS\nElementary OS 0.4.1 Loki\nElementary OS 0.5 Juno\n\n\n$ docker pull anthonyrawlinsuom/lfmc-geoserver\n\n\n\nMaster Project Package\n\n\nThe components of the system are submodules of a master GitHub project. In order to maintain confidentiality, the webserver package is private.\n\n\nBuilding the containers\n\n\nSee: configuration\n\n\nTo build all the docker images from source run the following code:\n\n\n$ git clone https://github.com/AnthonyRawlinsUoM/LFMC\n$ cd LFMC\n$ make build",
            "title": "Installation"
        },
        {
            "location": "/install/#installation-from-docker",
            "text": "Assumes a Linux OS as the Container Host. LFMC was developed and tested on these OSes.  Ubuntu Server 16.04 LTS\nUbuntu Server 18.04 LTS\nElementary OS 0.4.1 Loki\nElementary OS 0.5 Juno  $ docker pull anthonyrawlinsuom/lfmc-geoserver  Master Project Package  The components of the system are submodules of a master GitHub project. In order to maintain confidentiality, the webserver package is private.  Building the containers  See: configuration  To build all the docker images from source run the following code:  $ git clone https://github.com/AnthonyRawlinsUoM/LFMC\n$ cd LFMC\n$ make build",
            "title": "Installation from Docker"
        },
        {
            "location": "/config/",
            "text": "Configuration\n\n\nTo host the project yourself a few files will need a little configuration.\n\n\n\n\n\n\nFirstly signup to Auth0 and create an API Access Token.\n\n\n\n\n\n\nCreate Enterprise links for OAuth configuration.\n\n\n\n\n\n\nConfigure database users automatic signup.\n\n\n\n\n\n\nOther configuration steps\n\n\n\n\n\n\nDomain name registration and delegation of wildcard subdomain. For a simple domain-validated solution we recommend Let's Encrypt\n\n\n\n\n\n\nDataset placement and ENV configuration. The GeoServer Database must be accessible to the Celery Workers and so sharing it via NFS seems to be a workable solution.\n\n\n\n\n\n\nSecurity Essentials, password configuration.\n\n\n\n\n\n\nSecurity Recommendations\n\n\n\n\nIP subnets can be imposed via the NAS to ensure only the Celery Workers can access the data.\n\n\nChange the default passwords\n\n\nUse HTTPS by registering a wildcard certificate\n\n\n\n\nThe Environment File (.env)\n\n\nAlong with the docker-compose.yml file there is a very important hidden file that includes deployment configuration parameters used as Environment Variables by docker when bootstrapping the system.\n\n\nLFMC_INSTALL_DIR=/home/arawlins/Documents/LFMC\nFQDN=landscapefuelmoisture.bushfirebehaviour.net.au\nNFS_SERVER=10.101.94.16\n# NFS_SERVER=192.168.10.1\nNFS_PATH=/Pyromancer/Projects/Landscape_Fuel_Moisture_Project/data\nUSER=1000\nREGISTRY=127.0.0.1:5000\n\n\n\nEnvironment Variables in the '.env' file\n\n\nThe .env file contains the following configuration variables:\n\n\n'LFMC_INSTALL_DIR'\n\n\nThe LFMC_INSTALL_DIR variable is the absolute path to the parent directory of the source code you cloned from GitHub.\n\n\n'FQDN'\n\n\nThe 'FQDN' variable is the Fully Qualified Domain Name from which you would like to host the LFMC system. This domain name and a wildcard subdomain A record eg., *.landscapefuelmoisture.bushfirebehaviour.net.au must both resolve to the machine that hosts reverse-proxy instance.\n\n\n'NFS_SERVER'\n\n\nThe 'NFS_SERVER' is the IP address of the Network Attached Storage (NAS) Machine that shares the Datasets via NFS.\n\n\n'NFS_PATH'\n\n\nThe 'NFS_PATH' variable is the path to the NFS share on the NAS.\n\n\n'REGISTRY'\n\n\nThis is the url to a docker image registry. You could alternatively set this to any public or private (with additional authentication configuration required) docker registry.\n\n\nNFS Configuration\n\n\nDocker volumes are shared amongst containers via a central NFS share on NAS. The following is an excerpt from the docker-compose.yml file that shows how NFS parameters are configured to allow simultaneous access from multiple instances of the docker images (eg., api, worker, or pipeline)\n\n\nnfs_fuel:\n    driver: local\n    driver_opts:\n    type: nfs\n    o: addr=${NFS_SERVER},nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2\n    device: ${NFS_SERVER}:${NFS_PATH}/geoserver_data/FuelModels/",
            "title": "Configuration"
        },
        {
            "location": "/config/#configuration",
            "text": "To host the project yourself a few files will need a little configuration.    Firstly signup to Auth0 and create an API Access Token.    Create Enterprise links for OAuth configuration.    Configure database users automatic signup.    Other configuration steps    Domain name registration and delegation of wildcard subdomain. For a simple domain-validated solution we recommend Let's Encrypt    Dataset placement and ENV configuration. The GeoServer Database must be accessible to the Celery Workers and so sharing it via NFS seems to be a workable solution.    Security Essentials, password configuration.    Security Recommendations   IP subnets can be imposed via the NAS to ensure only the Celery Workers can access the data.  Change the default passwords  Use HTTPS by registering a wildcard certificate",
            "title": "Configuration"
        },
        {
            "location": "/config/#the-environment-file-env",
            "text": "Along with the docker-compose.yml file there is a very important hidden file that includes deployment configuration parameters used as Environment Variables by docker when bootstrapping the system.  LFMC_INSTALL_DIR=/home/arawlins/Documents/LFMC\nFQDN=landscapefuelmoisture.bushfirebehaviour.net.au\nNFS_SERVER=10.101.94.16\n# NFS_SERVER=192.168.10.1\nNFS_PATH=/Pyromancer/Projects/Landscape_Fuel_Moisture_Project/data\nUSER=1000\nREGISTRY=127.0.0.1:5000  Environment Variables in the '.env' file  The .env file contains the following configuration variables:  'LFMC_INSTALL_DIR'  The LFMC_INSTALL_DIR variable is the absolute path to the parent directory of the source code you cloned from GitHub.  'FQDN'  The 'FQDN' variable is the Fully Qualified Domain Name from which you would like to host the LFMC system. This domain name and a wildcard subdomain A record eg., *.landscapefuelmoisture.bushfirebehaviour.net.au must both resolve to the machine that hosts reverse-proxy instance.  'NFS_SERVER'  The 'NFS_SERVER' is the IP address of the Network Attached Storage (NAS) Machine that shares the Datasets via NFS.  'NFS_PATH'  The 'NFS_PATH' variable is the path to the NFS share on the NAS.  'REGISTRY'  This is the url to a docker image registry. You could alternatively set this to any public or private (with additional authentication configuration required) docker registry.  NFS Configuration  Docker volumes are shared amongst containers via a central NFS share on NAS. The following is an excerpt from the docker-compose.yml file that shows how NFS parameters are configured to allow simultaneous access from multiple instances of the docker images (eg., api, worker, or pipeline)  nfs_fuel:\n    driver: local\n    driver_opts:\n    type: nfs\n    o: addr=${NFS_SERVER},nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2\n    device: ${NFS_SERVER}:${NFS_PATH}/geoserver_data/FuelModels/",
            "title": "The Environment File (.env)"
        },
        {
            "location": "/developers/",
            "text": "Development\n\n\nBuild Tools\n\n\n\n\nMake\n\n\nDocker\n\n\ndocker-compose\n\n\nAngular\n\n\nNode\n\n\n\n\nModules can be built using the supplied Makefiles.\n\n\nTest, Bump, Patch & Release builds\n\n\nPre-configured makefiles allow you to contribute version number releases in the following standardised way.\n\n\nTo make a test release\n\n\nVersion number remains the same\neg., 1.2.3 --> 1.2.3\n\n\nTo make a bump release\n\n\neg., 1.2.3 --> 1.2.4\n\n\n$ make bump\n\n\n\nTo make a patch release\n\n\neg., 1.2.4 --> 1.3.0\n\n\n$ make patch\n\n\n\nTo make a release version\n\n\neg., 1.3.0 --> 2.0.0\n\n\n$ make release\n\n\n\nVersion Control\n\n\nModules are controlled by a VERSION file in each top-level directory.\n\n\nLocal Docker Image Repository",
            "title": "Development"
        },
        {
            "location": "/developers/#development",
            "text": "Build Tools   Make  Docker  docker-compose  Angular  Node   Modules can be built using the supplied Makefiles.  Test, Bump, Patch & Release builds  Pre-configured makefiles allow you to contribute version number releases in the following standardised way.  To make a test release  Version number remains the same\neg., 1.2.3 --> 1.2.3  To make a bump release  eg., 1.2.3 --> 1.2.4  $ make bump  To make a patch release  eg., 1.2.4 --> 1.3.0  $ make patch  To make a release version  eg., 1.3.0 --> 2.0.0  $ make release  Version Control  Modules are controlled by a VERSION file in each top-level directory.",
            "title": "Development"
        },
        {
            "location": "/developers/#local-docker-image-repository",
            "text": "",
            "title": "Local Docker Image Repository"
        },
        {
            "location": "/deploy/",
            "text": "Deployment\n\n\nA single GeoServer instance should be sufficient in most circumstances. Additional WebServer instances can  be deployed via a container management tool like \nKubernetes\n as required, by modifying the docker compose yaml file with a tool such as \nKompose\n.\n\n\nServer Requirements\n\n\nAny hosting platform capable of running Docker.\n\n\nSoftware Requirements\n\n\n\n\nDocker\n\n\nDocker Compose\n\n\n\n\nA brief introduction to Docker \n\n\nSingle-host mode\n\n\n$ docker-compose up &\n\n\n\nSwarm Mode\n\n\n$ docker stack deploy lfmc\n\n\n\nRestarting services\n\n\nFor example to restart the API server just enter:\n\n\n$ docker-compose restart api\n\n\n\nScaling\n\n\nServices can be scaled to cope with load using the following syntax\n\n\n$ docker-compose up --scale api=2\n\n\n\nStopping the Project\n\n\n$ docker-compose down\n\n\n\nSee: \nDocker Compose Documentation",
            "title": "Deployment"
        },
        {
            "location": "/deploy/#deployment",
            "text": "A single GeoServer instance should be sufficient in most circumstances. Additional WebServer instances can  be deployed via a container management tool like  Kubernetes  as required, by modifying the docker compose yaml file with a tool such as  Kompose .  Server Requirements  Any hosting platform capable of running Docker.  Software Requirements   Docker  Docker Compose   A brief introduction to Docker   Single-host mode  $ docker-compose up &  Swarm Mode  $ docker stack deploy lfmc  Restarting services  For example to restart the API server just enter:  $ docker-compose restart api  Scaling  Services can be scaled to cope with load using the following syntax  $ docker-compose up --scale api=2  Stopping the Project  $ docker-compose down  See:  Docker Compose Documentation",
            "title": "Deployment"
        },
        {
            "location": "/examples/",
            "text": "Making a query\n\n\n\n\n\nLFMC Tutorial Sample\n from \nAnthony Rawlins\n on \nVimeo\n.\n\n\n\nModel Selection\n\n\n\n\nSee: Models\n\n\nSpatial Selections\n\n\nThere are two main methods for making spatial selections.\n   + By importing a shape from either GeoJSON or SHP\n   + By drawing a polygon by hand using the drawling tools\n\n\nWe have provided some pre-defined example selections for all users...\n\n\n\n\nPolygon Selection\n\n\nUse the Polygon Tool to draw a selection.\n\n\n\n\nPolygons are always enclosed when drawn using the polygon tool. An Error will be reported if the polygon was not fully enclosed when imported.\n\n\n\n\nTo avoid weird behaviour when drawing.\n\nTurn \nOFF\n \nSnapping to Boundary\n\n\n\n\n\n\nLoading a GeoJSON File\n\n\nGeoJSON can be copy/pasted into the SPACE window. Pasting new data will overwrite the current spatial selection but will not be saved until clicking the Orange Pencil (Save) Icon.\n\n\nImporting a SHP file\n\n\nShape files (and their auxillaries) can be imported using the provided upload/import tool. These SHP fiels are converted on the server to GeoJSON format, and will be made available for selection.\n\n\n\n\nImportant note on file storage and persistence\n\n\nData that is drawn or imported by the user is stored \nin \nyour\n browser's local storage\n. This means if you log in on another machine, or via a different browser, your selections will \nNOT\n be available unless you reload them. The selections \nwill persist\n on the \nsame machine over different sessions\n though.\n\n\n\n\nTemporal Selections\n\n\nTemporal selections can be made from a start to a finish date in the TIME Panel.\n\n\n\n\nUse the calendar chooser (by clicking the date) on both the left and right side of th TIME Panel to select the day to start and end accordingly.\nAll records available between (inclusive) these dates will be used to plot your results.\n\n\nThe temporal selection is indicated by the \nCurrent Time Window\n. This window can be advanced or regressed by a day at atime by clicking its surrounding single arrows. The double arrows indicate advancing or regressing the current time window by its full length, ie., a 7 day window will be moved by a week if the double arrows are used.\n\n\nThe start and finish dates can simarly be advanced or regressed by a day by using the single arrows.\n\n\nTemporal Results\n\n\nViewing fine-grained data by Time-brushing\n\n\n\n\n\n\nInterpretting temporal results\n\n\nValues can be inspected by hovering your mouse over a series. Refer to the Model description for specifics on what the value actually conveys. Some Models use indexes while yet others use scalar values.\n\n\n\n\nSome Important caveats\n\n\nUse caution when comparing values!\n\nModels can use varying scales and a value of 0.8 in a range(0...1) can be more significant than 2 in a range(0-100).\nSome Models use a \nmoisture level\n, while others use a \nmoisture defecit\n This means sometimes diverging series can indicate similar moisture trends. For specific model information, please refer to their respective publications.\n\n\n\n\n\n\nTODO...\nAppropriate Ranges\nTemporal Resolution\n\n\n\n\nImportant note about value interpolation\n\n\nValues tha are plotted in the TIME Panel are interpolated using a specific algorithm to provide the simplest interpretation. Lines between observed values are indicative only and should not be used as an accurate representation of fuel moisture or index levels.\n\n\n\n\nGeo-location\n\n\nUse the Map's Search field to find specific named locations.",
            "title": "Examples"
        },
        {
            "location": "/examples/#making-a-query",
            "text": "LFMC Tutorial Sample  from  Anthony Rawlins  on  Vimeo .  Model Selection   See: Models  Spatial Selections  There are two main methods for making spatial selections.\n   + By importing a shape from either GeoJSON or SHP\n   + By drawing a polygon by hand using the drawling tools  We have provided some pre-defined example selections for all users...   Polygon Selection  Use the Polygon Tool to draw a selection.   Polygons are always enclosed when drawn using the polygon tool. An Error will be reported if the polygon was not fully enclosed when imported.   To avoid weird behaviour when drawing. \nTurn  OFF   Snapping to Boundary    Loading a GeoJSON File  GeoJSON can be copy/pasted into the SPACE window. Pasting new data will overwrite the current spatial selection but will not be saved until clicking the Orange Pencil (Save) Icon.  Importing a SHP file  Shape files (and their auxillaries) can be imported using the provided upload/import tool. These SHP fiels are converted on the server to GeoJSON format, and will be made available for selection.   Important note on file storage and persistence  Data that is drawn or imported by the user is stored  in  your  browser's local storage . This means if you log in on another machine, or via a different browser, your selections will  NOT  be available unless you reload them. The selections  will persist  on the  same machine over different sessions  though.   Temporal Selections  Temporal selections can be made from a start to a finish date in the TIME Panel.   Use the calendar chooser (by clicking the date) on both the left and right side of th TIME Panel to select the day to start and end accordingly.\nAll records available between (inclusive) these dates will be used to plot your results.  The temporal selection is indicated by the  Current Time Window . This window can be advanced or regressed by a day at atime by clicking its surrounding single arrows. The double arrows indicate advancing or regressing the current time window by its full length, ie., a 7 day window will be moved by a week if the double arrows are used.  The start and finish dates can simarly be advanced or regressed by a day by using the single arrows.  Temporal Results  Viewing fine-grained data by Time-brushing    Interpretting temporal results  Values can be inspected by hovering your mouse over a series. Refer to the Model description for specifics on what the value actually conveys. Some Models use indexes while yet others use scalar values.",
            "title": "Making a query"
        },
        {
            "location": "/examples/#some-important-caveats",
            "text": "Use caution when comparing values! \nModels can use varying scales and a value of 0.8 in a range(0...1) can be more significant than 2 in a range(0-100).\nSome Models use a  moisture level , while others use a  moisture defecit  This means sometimes diverging series can indicate similar moisture trends. For specific model information, please refer to their respective publications.    TODO...\nAppropriate Ranges\nTemporal Resolution   Important note about value interpolation  Values tha are plotted in the TIME Panel are interpolated using a specific algorithm to provide the simplest interpretation. Lines between observed values are indicative only and should not be used as an accurate representation of fuel moisture or index levels.",
            "title": "Some Important caveats"
        },
        {
            "location": "/examples/#geo-location",
            "text": "Use the Map's Search field to find specific named locations.",
            "title": "Geo-location"
        },
        {
            "location": "/API/",
            "text": "API\n\n\nIntended as a component to the LFMC Server Ecosystem. This is an image that answers Temporal Queries to form Time-series data in JSON format for subsequent analysis of Landscape Fuel Moisture Condition.\n\n\nAlso collects input data from a variety of sources and starts ingestion tasking on the cluster.\nProcesses, Models and TS Data are all exposed through a \nRESTful API\n.\n\n\nThe API is intended to be self-documenting and the endpoint can be queried using curl or similar commands. Hug is used for API development and Hug also naturally exposes a WSGI-Compatible API ready for production use.\n\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1\n\n\n\n\n\nEndpoint Examples\n\n\nRequesting with a basic spatio-temporal query via POST\n\n\ncurl -H \"Content-Type: application/json\" \\\n -H \"Accept: application/json\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\", \\\n        \"finish\": \"YYYYmmdd\", \\\n        \"models\": \"<comma separated list of models>\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.json\n\n\n\nExample Response\n\n\n\n\nRequesting NetCDF via POST\n\n\ncurl -H \"Content-Type: application/json\" \\\n     -H \"Accept: application/x-binary\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\", \\\n        \"finish\": \"YYYYmmdd\", \\\n        \"models\": \"<comma separated list of models>\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.nc\n\n\n\n\n\nNote the suffix of the request URL \n.nc\n vs. \n.json\n.\n\n\n\n\nRequesting an MP4 via POST\n\n\ncurl -H \"Content-Type: application/json\" \\\n     -H \"Accept: video/mp4\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\", \\\n        \"finish\": \"YYYYmmdd\", \\\n        \"models\": \"<comma separated list of models>\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.mp4\n\n\n\n\n\nNote the \n.mp4\n suffix.\n\n\n\n\nAvailable Models and their metadata via GET\n\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models\n\n\n\nModel Codes, Names, and Identifiers\n\n\nEach returns an array\n\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models/codes\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models/names\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models/idents",
            "title": "API"
        },
        {
            "location": "/API/#api",
            "text": "Intended as a component to the LFMC Server Ecosystem. This is an image that answers Temporal Queries to form Time-series data in JSON format for subsequent analysis of Landscape Fuel Moisture Condition.  Also collects input data from a variety of sources and starts ingestion tasking on the cluster.\nProcesses, Models and TS Data are all exposed through a  RESTful API .  The API is intended to be self-documenting and the endpoint can be queried using curl or similar commands. Hug is used for API development and Hug also naturally exposes a WSGI-Compatible API ready for production use.  $ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1",
            "title": "API"
        },
        {
            "location": "/API/#endpoint-examples",
            "text": "Requesting with a basic spatio-temporal query via POST  curl -H \"Content-Type: application/json\" \\\n -H \"Accept: application/json\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\", \\\n        \"finish\": \"YYYYmmdd\", \\\n        \"models\": \"<comma separated list of models>\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.json  Example Response   Requesting NetCDF via POST  curl -H \"Content-Type: application/json\" \\\n     -H \"Accept: application/x-binary\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\", \\\n        \"finish\": \"YYYYmmdd\", \\\n        \"models\": \"<comma separated list of models>\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.nc   Note the suffix of the request URL  .nc  vs.  .json .   Requesting an MP4 via POST  curl -H \"Content-Type: application/json\" \\\n     -H \"Accept: video/mp4\" \\\n -X POST \\\n -d '{  \"start\": \"YYYYmmdd\", \\\n        \"finish\": \"YYYYmmdd\", \\\n        \"models\": \"<comma separated list of models>\", \\\n        \"geo_json\": <valid geojson boundary goes here> }' \\\n http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/fuel.mp4   Note the  .mp4  suffix.   Available Models and their metadata via GET  $ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models  Model Codes, Names, and Identifiers  Each returns an array  $ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models/codes\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models/names\n\n$ curl http://api.landscapefuelmoisture.bushfirebehaviour.net.au/v1/models/idents",
            "title": "Endpoint Examples"
        },
        {
            "location": "/release-notes/",
            "text": "Release notes\n\n\nVersions 0.0.1 to 0.5.0 - were pre initial release.\nUsed for in-house development only.\n\n\nThis document is a \nstub\n for future version relase notes.\n\n\nCurrent version numbers are as follows:\n\n\n\n\n\n\n\n\nModule\n\n\nGithub Project\n\n\nDocker Project\n\n\nVersion\n\n\n\n\n\n\n\n\n\n\nLFMC Documentation\n\n\nlfmc-docs\n\n\nlfmc-docs\n\n\nv1.0.0\n\n\n\n\n\n\nLFMC WebServer\n\n\nlfmc-staging\n\n\nlfmc-staging\n\n\nv0.6.16\n\n\n\n\n\n\nLFMC GeoServer\n\n\nlfmc-geoserver\n\n\nlfmc-geoserver\n\n\nv1.0.0\n\n\n\n\n\n\nLFMC Database\n\n\nlfmc-mongodb\n\n\nlfmc-mongodb\n\n\nv1.0.0\n\n\n\n\n\n\nLFMC Logic\n\n\nlfmc-pipeline\n\n\nlfmc-pipeline\n\n\nv1.0.0\n\n\n\n\n\n\nLFMC API\n\n\nlfmc-pipeline\n\n\nlfmc-api\n\n\nv1.0.0",
            "title": "Release Notes"
        },
        {
            "location": "/release-notes/#release-notes",
            "text": "Versions 0.0.1 to 0.5.0 - were pre initial release.\nUsed for in-house development only.  This document is a  stub  for future version relase notes.  Current version numbers are as follows:     Module  Github Project  Docker Project  Version      LFMC Documentation  lfmc-docs  lfmc-docs  v1.0.0    LFMC WebServer  lfmc-staging  lfmc-staging  v0.6.16    LFMC GeoServer  lfmc-geoserver  lfmc-geoserver  v1.0.0    LFMC Database  lfmc-mongodb  lfmc-mongodb  v1.0.0    LFMC Logic  lfmc-pipeline  lfmc-pipeline  v1.0.0    LFMC API  lfmc-pipeline  lfmc-api  v1.0.0",
            "title": "Release notes"
        },
        {
            "location": "/errors/",
            "text": "Error Reporting\n\n\nShould you encounter a error, omission or reproducible bug please contact \nAnthony Rawlins\n at University of Melbourne.\n\n\nInline error reporting is as simple as clicking the green \nOK\n button on reported errors. Clicking \nCancel\n will not send a bug report.\n\n\nAll logged and reported errors automatically create an issue on the appropriate Github Repository, allowing for \nIssue Tracking\n. You can also use the same page to add Feature Requests.",
            "title": "Error Reporting"
        },
        {
            "location": "/errors/#error-reporting",
            "text": "Should you encounter a error, omission or reproducible bug please contact  Anthony Rawlins  at University of Melbourne.  Inline error reporting is as simple as clicking the green  OK  button on reported errors. Clicking  Cancel  will not send a bug report.  All logged and reported errors automatically create an issue on the appropriate Github Repository, allowing for  Issue Tracking . You can also use the same page to add Feature Requests.",
            "title": "Error Reporting"
        }
    ]
}